name: backend lubimovka build and deploy

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - feature/deploy_CD/CI

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

defaults:
  run:
    working-directory: .

jobs:
  tests:
    name: Run test.
    runs-on: ubuntu-latest
    steps:
    -
      name: Check out the repo
      uses: actions/checkout@v2
    -
      name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    -
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
    -
      name: Test with pytest
      run: pytest

  build-and-push-image-to-github-packages:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: tests
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      -
        name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: develop_latest
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image-to-github-packages
    steps:
      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ github.event.repository.name }}
            git pull
            sudo docker-compose -f develop_deploy.yaml stop
            sudo docker-compose -f develop_deploy.yaml rm -f backend
            mkdir -p ./.envs/
            touch .envs/.postgres
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .postgres
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .postgres
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .postgres
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .postgres
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .postgres
            touch .envs/.django
            echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .django
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .django
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .django
            echo DJANGO_EMAIL_BACKEND=${{ secrets.DJANGO_EMAIL_BACKEND }} >> .django
            echo DJANGO_DEFAULT_FROM_EMAIL=${{ secrets.DJANGO_DEFAULT_FROM_EMAIL }} >> .django
            echo DJANGO_SERVER_EMAIL=${{ secrets.DJANGO_SERVER_EMAIL }} >> .django
            echo DJANGO_EMAIL_SUBJECT_PREFIX=${{ secrets.DJANGO_EMAIL_SUBJECT_PREFIX }} >> .django
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .django
            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .django
            echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .django
            echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .django
            touch .envs/.swag
            echo PUID=$(id -u) > .envs/.swag
            echo PGID=$(id -g) >> .envs/.swag
            echo URL=${{ secrets.SITE_URL }} >> .envs/.swag
            echo CERTPROVIDER=zerossl >> .envs/.swag
            echo EMAIL=${{ secrets.SSL_EMAIL }} >> .envs/.swag
            sudo docker-compose -f develop_deploy.yaml up -d
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} success!
