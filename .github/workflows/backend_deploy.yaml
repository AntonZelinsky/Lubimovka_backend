name: production backend build and deploy

on:
  push:
    branches:
      - develop
      - master
      - feature/deploy_CD/CI

defaults:
  run:
    working-directory: .

jobs:
  tests:
    name: Run test.
    runs-on: ubuntu-latest
    steps:
    -
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
    -
      name: Test with pytest
      run: pytest

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: backend
          tags: ${{ secrets.DOCKER_USERNAME }}/lubimovka_back:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ github.event.repository.name }}
            git pull origin feature/deploy_CD/CI
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgramback
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgramfront
            sudo docker-compose -f production.yaml stop
            sudo docker-compose -f production.yaml rm -f backend
            mkdir -p ./.envs/
            touch .envs/.postgres
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .postgres
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .postgres
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .postgres
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .postgres
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .postgres
            touch .envs/.django
            echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .django
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .django
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .django
            echo DJANGO_EMAIL_BACKEND=${{ secrets.DJANGO_EMAIL_BACKEND }} >> .django
            echo DJANGO_DEFAULT_FROM_EMAIL=${{ secrets.DJANGO_DEFAULT_FROM_EMAIL }} >> .django
            echo DJANGO_SERVER_EMAIL=${{ secrets.DJANGO_SERVER_EMAIL }} >> .django
            echo DJANGO_EMAIL_SUBJECT_PREFIX=${{ secrets.DJANGO_EMAIL_SUBJECT_PREFIX }} >> .django
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .django
            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .django
            echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .django
            echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .django
            sudo docker-compose -f production.yaml up -d
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} success!
